name: RDP

on:
  workflow_dispatch:

jobs:
  secure-rdp:
    runs-on: windows-latest
    timeout-minutes: 3600

    steps:
      - name: Configure Core RDP Settings
        shell: pwsh
        run: |
          # Enable Remote Desktop and disable Network Level Authentication
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server' -Name "fDenyTSConnections" -Value 0 -Force
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' -Name "UserAuthentication" -Value 0 -Force
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' -Name "SecurityLayer" -Value 0 -Force

          # Allow RDP through firewall
          netsh advfirewall firewall delete rule name="RDP-Tailscale" | Out-Null
          netsh advfirewall firewall add rule name="RDP-Tailscale" dir=in action=allow protocol=TCP localport=3389
          Restart-Service -Name TermService -Force

      - name: Create RDP User
        shell: pwsh
        run: |
          Add-Type -AssemblyName System.Security
          $chars = ([char[]](33..126))
          $password = -join ((1..16) | ForEach-Object { Get-Random -InputObject $chars })
          $securePass = ConvertTo-SecureString $password -AsPlainText -Force
          if (-not (Get-LocalUser -Name "RDP" -ErrorAction SilentlyContinue)) {
              New-LocalUser -Name "RDP" -Password $securePass -AccountNeverExpires
              Add-LocalGroupMember -Group "Administrators" -Member "RDP"
              Add-LocalGroupMember -Group "Remote Desktop Users" -Member "RDP"
          }
          "RDP_PASSWORD=$password" | Out-File -FilePath $env:GITHUB_ENV -Append

      - name: Install Tailscale
        shell: pwsh
        run: |
          $url = "https://pkgs.tailscale.com/stable/tailscale-setup-1.82.0-amd64.msi"
          $path = "$env:TEMP\tailscale.msi"
          Invoke-WebRequest -Uri $url -OutFile $path
          Start-Process msiexec.exe -ArgumentList "/i", "`"$path`"", "/quiet", "/norestart" -Wait
          Remove-Item $path -Force

      - name: Connect to Tailscale
        shell: pwsh
        run: |
          & "$env:ProgramFiles\Tailscale\tailscale.exe" up --authkey=${{ secrets.TAILSCALE_AUTH_KEY }} --hostname="gh-runner-$env:GITHUB_RUN_ID"
          $tsip = ""
          for ($i=0; $i -lt 10; $i++) {
              $tsip = & "$env:ProgramFiles\Tailscale\tailscale.exe" ip -4
              if ($tsip) { break }
              Start-Sleep -Seconds 5
          }
          if (-not $tsip) { throw "No Tailscale IP assigned." }
          "TAILSCALE_IP=$tsip" | Out-File -FilePath $env:GITHUB_ENV -Append
          Write-Host "Tailscale IP: $tsip"

      - name: Merge D: into C: (Make 300GB Partition)
        shell: pwsh
        run: |
          Write-Host "=== Checking disk layout ==="
          Get-Volume | Select-Object DriveLetter, SizeRemaining, FileSystem

          Write-Host "Removing D: partition..."
          $dVol = Get-Partition -DriveLetter D -ErrorAction SilentlyContinue
          if ($dVol) {
              $dVol | Remove-Partition -Confirm:$false
          }

          Write-Host "Expanding C: partition..."
          $cVol = Get-Partition -DriveLetter C
          $disk = Get-Disk | Where-Object { $_.PartitionStyle -eq 'GPT' -and $_.OperationalStatus -eq 'Online' }
          $size = ($disk | Get-PartitionSupportedSize -PartitionNumber $cVol.PartitionNumber)
          Resize-Partition -DriveLetter C -Size $size.SizeMax

          Write-Host "=== New layout ==="
          Get-Volume | Select-Object DriveLetter, Size, SizeRemaining

      - name: Verify Disk
        shell: pwsh
        run: |
          Write-Host "Final Disk Check:"
          Get-Volume | Select DriveLetter, Size, SizeRemaining

      - name: Verify RDP Connectivity
        shell: pwsh
        run: |
          $test = Test-NetConnection -ComputerName $env:TAILSCALE_IP -Port 3389
          if (-not $test.TcpTestSucceeded) {
              throw "RDP port 3389 not accessible!"
          }
          Write-Host "RDP Connectivity OK!"

      - name: Keep Session Alive
        shell: pwsh
        run: |
          Write-Host "`n==============================="
          Write-Host "âœ… RDP Session Ready!"
          Write-Host "Address: $env:TAILSCALE_IP"
          Write-Host "Username: RDP"
          Write-Host "Password: $env:RDP_PASSWORD"
          Write-Host "===============================`n"
          while ($true) {
              Write-Host "[$(Get-Date)] RDP Running..."
              Start-Sleep -Seconds 300
          }
